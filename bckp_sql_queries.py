import configparser

log_days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,27,28,29,30]
song_letters = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O',
               'P','Q','R','S','T','U','V','W','X','Y','Z']
# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')
LOG_DATA=config.get("S3","LOG_DATA")
LOG_JSONPATH=config.get("S3","LOG_JSONPATH")
SONG_DATA=config.get("S3","SONG_DATA")
DWH_ROLE_ARN = config.get("IAM_ROLE","ARN")

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS events_log_stg"
staging_songs_table_drop = "DROP TABLE IF EXISTS songs_log_stg"
songplay_table_drop = "DROP TABLE IF EXISTS songplays"
user_table_drop = "DROP TABLE IF EXISTS users"
song_table_drop = "DROP TABLE IF EXISTS songs"
artist_table_drop = "DROP TABLE IF EXISTS artists"
time_table_drop = "DROP TABLE IF EXISTS time"

# CREATE TABLES

staging_events_table_create= ("""
CREATE TABLE IF NOT EXISTS events_log_stg
(
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ingested_at timestamp DEFAULT CURRENT_TIMESTAMP,
  data jsonb NOT NULL
);
""")

staging_songs_table_create = ("""
CREATE TABLE IF NOT EXISTS songs_log_stg 
(
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ingested_at timestamp DEFAULT CURRENT_TIMESTAMP,
  data jsonb NOT NULL
);
""")

songplay_table_create = ("""
CREATE TABLE IF NOT EXISTS songplays
(songplay_key INT IDENTITY(0,1), songplay_id INT NOT NULL UNIQUE, 
start_time TIMESTAMP, user_id VARCHAR(30) REFERENCES users (user_id),
level INT, song_id VARCHAR(30) REFERENCES songs (song_id),
artist_id VARCHAR(30) REFERENCES artists (artist_id), session_id INT,
location VARCHAR(20), user_agent VARCHAR(20))
""")

user_table_create = ("""
CREATE TABLE IF NOT EXISTS users
( user_key INT IDENTITY(0,1), user_id VARCHAR(30) UNIQUE NOT NULL,
first_name VARCHAR(20), last_name VARCHAR(20), gender CHAR(4),
level INT
)
""")

song_table_create = ("""
CREATE TABLE IF NOT EXISTS songs
(song_key INT IDENTITY(0,1), song_id VARCHAR(30) UNIQUE NOT NULL,
title VARCHAR(40) NOT NULL, artist_id VARCHAR(30) REFERENCES artists (artist_id), year INT, duration DECIMAL
)
""")

artist_table_create = ("""
CREATE TABLE IF NOT EXISTS artists
(artist_key INT IDENTITY(0,1), artist_id VARCHAR(30) UNIQUE NOT NULL,
name VARCHAR(30), location VARCHAR(20), lattitude DECIMAL, longitude DECIMAL
)
""")

time_table_create = ("""
CREATE TABLE IF NOT EXISTS time
(time_key INT IDENTITY(0,1), start_time TIMESTAMP, hour INT, day INT,
month INT, year INT, weekday INT
)
""")

# STAGING TABLES

staging_events_copy = ("""
copy events_log_stg 
from '{}'
iam_role '{}'
region 'us-west-2'
JSON '{}';
""").format(LOG_DATA, DWH_ROLE_ARN, LOG_JSONPATH)

staging_songs_copy = """"""
helper = ("""
copy songs_log_stg 
from '{}'
iam_role {}
region 'us-west-2'
JSON 'songs_log_json_paths.json';
""").format(SONG_DATA, DWH_ROLE_ARN)

# FINAL TABLES

songplay_table_insert = ("""
""")

user_table_insert = ("""
""")

song_table_insert = ("""
""")

artist_table_insert = ("""
""")

time_table_insert = ("""
""")

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, artist_table_create, user_table_create, song_table_create, songplay_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
